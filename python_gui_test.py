import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import sys
import os

class my_gui():
    def __init__(self):
        self.root_windows = tk.Tk()
        self.root_windows.iconphoto(True, tk.PhotoImage(data=self.getIconData()))

    def getIconData(self):
        return ""

    def callback_button1(self):
        self.filenames = filedialog.askopenfilenames(title='请选择文件', filetypes=[('图像文件', ".txt .bin .zip"), ('所有文件', ' *')], initialdir=os.path.abspath(os.path.dirname(sys.argv[0])))
        self.Entry1.delete(0, tk.END)
        self.Entry1.insert('insert', str(self.filenames))

    def setup(self):
        self.fram1 = tk.Frame(self.root_windows, background='red')
        self.fram1.pack(side='top', fill='x')
        self.LabelFrame1 = ttk.LabelFrame(self.fram1, text='文件路径')
        self.LabelFrame1.pack(fill='x', padx=2, pady=2)
        self.Entry1 = tk.Entry(self.LabelFrame1, text='123')
        self.Entry1.pack(side='left', fill='x', expand='yes', padx=5, pady=2)
        self.Button1 = tk.Button(self.LabelFrame1, text='选择文件',command=self.callback_button1)
        self.Button1.pack(side='left', padx=5, pady=2)

        self.fram2 = tk.Frame(self.root_windows,background='green')
        self.fram2.pack(side='left', fill='both', expand='yes', padx=5)
        tk.Label(self.fram2, text='22222222222').pack(expand='yes')

        self.fram3 = tk.Frame(self.root_windows, background='blue')
        self.fram3.pack(side='left', fill='both', expand='yes', padx=5)
        tk.Label(self.fram3, text='33333333333').pack(expand='yes')


    def show(self):
        self.root_windows.mainloop()

def main():
    gui = my_gui()
    gui.setup()
    gui.show()

if __name__ == "__main__":
    main()
